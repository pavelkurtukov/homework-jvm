public class JvmComprehension {
    // 0 В Metaspace ClassLoader-ом будут загружены классы и их статические переменные и методы:
    // JvmComprehension - Application ClassLoader
    // Object - Bootstrap ClassLoader
	public static void main(String[] args) {
        // 1 В области памяти StackMemory во фрейме для main() создаётся примитивная переменная i и ей присваивается значение 1
        int i = 1;
		
        // 2 В куче (heap) выделяется память в размере, необходимом для объекта класса Object,
        // затем конструктор в только что выделенной области памяти создаёт объект класса Object.
        // В завершение в StackMemory создаётся переменная mem, хранящая ссылку на область памяти в куче, в которой хранится сам объект
        Object o = new Object();
		
        // 3 В области памяти StackMemory во фрейме для main() создаётся примитивная переменная ii и ей присваивается значение 2
        Integer ii = 2;
		
        // 4 Для метода prinatAll в StackMemory создаётся новый фрейм и в нём создаются 3 переменных (o, i, ii),
        // значения которых копируются из соответствующих переменных во фрейме для метода main()
        printAll(o, i, ii);
		
        // 7 Для метода System.out.println() в StackMemory создаётся новый фрейм (отличный от фрейма, созданного на шаге 6), в нём создаётся переменная x,
        // в которой создаётся ссылка на объект класса String в куче для строки "finished"
        // Насколько мне известно, для хранения строк используется специальный String pool. Судя по всему это особая часть кучи.
        // После выполнения команды выделенная область памяти в StackMemory очистится
        System.out.println("finished");
		
        // При завершении работы метода в StackMemory удалится фрейм, выделенный для main()
		
        // Объекты, созданные в куче будут удалены GarbageCollector-ом
    }

    private static void printAll(Object o, int i, Integer ii) {
        // 5  области памяти StackMemory во фрейме для метода printAll() создаётся примитивная переменная uselessVar и ей присваивается значение 700
        Integer uselessVar = 700;
		
        // 6 В куче создаётся выделяется память, неободимая для объекта класса String,
        // в ней создаётся новый объект класса String (полученный в результате приведения к строке объекта методом Object.toString()
        // и его конкатенации со значениями переменных i и ii, преобразованных в строковые значения.
        // Для метода System.out.println() в StackMemory создаётся новый фрейм и в нём создаётся переменная x,
        // в которой хранится ссылка на созданный перед этим объект класса String
        // После выполнения команды выделенная область памяти в StackMemory очистится
        System.out.println(o.toString() + i + ii);
		
        // При выходе из метода область памяти, выделенная в StackMemory для метода printAll, удаляется
    }
}